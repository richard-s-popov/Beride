//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Request_Trip", "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.Trip), "Request", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Request), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Cars_CarBrands", "CarBrand", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.CarBrand), "Car", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Car), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Cars_CarColors", "CarColor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.CarColor), "Car", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Car), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Cars_CarModels", "CarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.CarModel), "Car", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Car), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Trips_Cars", "Car", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(TransportSystem.Domain.Car), "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Trip), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_CarModels_CarBrands", "CarBrand", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.CarBrand), "CarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.CarModel), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Request_Trip1", "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.Trip), "Request", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Request), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Trips_TripStatus", "TripStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.TripStatus), "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Trip), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Trips_TripType", "TripType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.TripType), "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Trip), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_TripDate_Trip", "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.Trip), "TripDate", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.TripDate), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_Trip_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.User), "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.Trip), true)]
[assembly: EdmRelationshipAttribute("TransportSystemModel", "FK_TripRoute_Trip", "Trip", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TransportSystem.Domain.Trip), "TripRoute", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TransportSystem.Domain.TripRoute), true)]

#endregion

namespace TransportSystem.Domain
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект Entities, используя строку соединения из раздела "Entities" файла конфигурации приложения.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта Entities.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта Entities.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Request> Request
        {
            get
            {
                if ((_Request == null))
                {
                    _Request = base.CreateObjectSet<Request>("Request");
                }
                return _Request;
            }
        }
        private ObjectSet<Request> _Request;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Trip> Trip
        {
            get
            {
                if ((_Trip == null))
                {
                    _Trip = base.CreateObjectSet<Trip>("Trip");
                }
                return _Trip;
            }
        }
        private ObjectSet<Trip> _Trip;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TripDate> TripDate
        {
            get
            {
                if ((_TripDate == null))
                {
                    _TripDate = base.CreateObjectSet<TripDate>("TripDate");
                }
                return _TripDate;
            }
        }
        private ObjectSet<TripDate> _TripDate;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Car> Car
        {
            get
            {
                if ((_Car == null))
                {
                    _Car = base.CreateObjectSet<Car>("Car");
                }
                return _Car;
            }
        }
        private ObjectSet<Car> _Car;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CarBrand> CarBrand
        {
            get
            {
                if ((_CarBrand == null))
                {
                    _CarBrand = base.CreateObjectSet<CarBrand>("CarBrand");
                }
                return _CarBrand;
            }
        }
        private ObjectSet<CarBrand> _CarBrand;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CarColor> CarColor
        {
            get
            {
                if ((_CarColor == null))
                {
                    _CarColor = base.CreateObjectSet<CarColor>("CarColor");
                }
                return _CarColor;
            }
        }
        private ObjectSet<CarColor> _CarColor;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CarModel> CarModel
        {
            get
            {
                if ((_CarModel == null))
                {
                    _CarModel = base.CreateObjectSet<CarModel>("CarModel");
                }
                return _CarModel;
            }
        }
        private ObjectSet<CarModel> _CarModel;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<User> User
        {
            get
            {
                if ((_User == null))
                {
                    _User = base.CreateObjectSet<User>("User");
                }
                return _User;
            }
        }
        private ObjectSet<User> _User;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TripStatus> TripStatus
        {
            get
            {
                if ((_TripStatus == null))
                {
                    _TripStatus = base.CreateObjectSet<TripStatus>("TripStatus");
                }
                return _TripStatus;
            }
        }
        private ObjectSet<TripStatus> _TripStatus;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TripType> TripType
        {
            get
            {
                if ((_TripType == null))
                {
                    _TripType = base.CreateObjectSet<TripType>("TripType");
                }
                return _TripType;
            }
        }
        private ObjectSet<TripType> _TripType;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TripRoute> TripRoute
        {
            get
            {
                if ((_TripRoute == null))
                {
                    _TripRoute = base.CreateObjectSet<TripRoute>("TripRoute");
                }
                return _TripRoute;
            }
        }
        private ObjectSet<TripRoute> _TripRoute;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Request. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRequest(Request request)
        {
            base.AddObject("Request", request);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Trip. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTrip(Trip trip)
        {
            base.AddObject("Trip", trip);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TripDate. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTripDate(TripDate tripDate)
        {
            base.AddObject("TripDate", tripDate);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Car. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCar(Car car)
        {
            base.AddObject("Car", car);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CarBrand. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCarBrand(CarBrand carBrand)
        {
            base.AddObject("CarBrand", carBrand);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CarColor. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCarColor(CarColor carColor)
        {
            base.AddObject("CarColor", carColor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CarModel. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCarModel(CarModel carModel)
        {
            base.AddObject("CarModel", carModel);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet User. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUser(User user)
        {
            base.AddObject("User", user);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TripStatus. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTripStatus(TripStatus tripStatus)
        {
            base.AddObject("TripStatus", tripStatus);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TripType. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTripType(TripType tripType)
        {
            base.AddObject("TripType", tripType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TripRoute. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTripRoute(TripRoute tripRoute)
        {
            base.AddObject("TripRoute", tripRoute);
        }

        #endregion

        #region Импортируемые функции
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="startPointGid">Нет доступной документации по метаданным.</param>
        /// <param name="endPointGid">Нет доступной документации по метаданным.</param>
        /// <param name="dateAt">Нет доступной документации по метаданным.</param>
        /// <param name="dateTo">Нет доступной документации по метаданным.</param>
        /// <param name="tripType">Нет доступной документации по метаданным.</param>
        /// <param name="tripStatus">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetTrips_Result> GetTrips(global::System.String startPointGid, global::System.String endPointGid, Nullable<global::System.DateTime> dateAt, Nullable<global::System.DateTime> dateTo, Nullable<global::System.Int32> tripType, Nullable<global::System.Int32> tripStatus)
        {
            ObjectParameter startPointGidParameter;
            if (startPointGid != null)
            {
                startPointGidParameter = new ObjectParameter("StartPointGid", startPointGid);
            }
            else
            {
                startPointGidParameter = new ObjectParameter("StartPointGid", typeof(global::System.String));
            }
    
            ObjectParameter endPointGidParameter;
            if (endPointGid != null)
            {
                endPointGidParameter = new ObjectParameter("EndPointGid", endPointGid);
            }
            else
            {
                endPointGidParameter = new ObjectParameter("EndPointGid", typeof(global::System.String));
            }
    
            ObjectParameter dateAtParameter;
            if (dateAt.HasValue)
            {
                dateAtParameter = new ObjectParameter("DateAt", dateAt);
            }
            else
            {
                dateAtParameter = new ObjectParameter("DateAt", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateToParameter;
            if (dateTo.HasValue)
            {
                dateToParameter = new ObjectParameter("DateTo", dateTo);
            }
            else
            {
                dateToParameter = new ObjectParameter("DateTo", typeof(global::System.DateTime));
            }
    
            ObjectParameter tripTypeParameter;
            if (tripType.HasValue)
            {
                tripTypeParameter = new ObjectParameter("TripType", tripType);
            }
            else
            {
                tripTypeParameter = new ObjectParameter("TripType", typeof(global::System.Int32));
            }
    
            ObjectParameter tripStatusParameter;
            if (tripStatus.HasValue)
            {
                tripStatusParameter = new ObjectParameter("TripStatus", tripStatus);
            }
            else
            {
                tripStatusParameter = new ObjectParameter("TripStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetTrips_Result>("GetTrips", startPointGidParameter, endPointGidParameter, dateAtParameter, dateToParameter, tripTypeParameter, tripStatusParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="date">Нет доступной документации по метаданным.</param>
        /// <param name="userId">Нет доступной документации по метаданным.</param>
        /// <param name="tripType">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetActiveTripsByUser_Result> GetActiveTripsByUser(Nullable<global::System.DateTime> date, Nullable<global::System.Int32> userId, Nullable<global::System.Int32> tripType)
        {
            ObjectParameter dateParameter;
            if (date.HasValue)
            {
                dateParameter = new ObjectParameter("Date", date);
            }
            else
            {
                dateParameter = new ObjectParameter("Date", typeof(global::System.DateTime));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(global::System.Int32));
            }
    
            ObjectParameter tripTypeParameter;
            if (tripType.HasValue)
            {
                tripTypeParameter = new ObjectParameter("TripType", tripType);
            }
            else
            {
                tripTypeParameter = new ObjectParameter("TripType", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetActiveTripsByUser_Result>("GetActiveTripsByUser", dateParameter, userIdParameter, tripTypeParameter);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="Car")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Car : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Car.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="brandId">Исходное значение свойства BrandId.</param>
        /// <param name="modelId">Исходное значение свойства ModelId.</param>
        /// <param name="year">Исходное значение свойства Year.</param>
        /// <param name="colorId">Исходное значение свойства ColorId.</param>
        /// <param name="isDeleted">Исходное значение свойства IsDeleted.</param>
        public static Car CreateCar(global::System.Int32 id, global::System.Int32 brandId, global::System.Int32 modelId, global::System.Int32 year, global::System.Int32 colorId, global::System.Boolean isDeleted)
        {
            Car car = new Car();
            car.Id = id;
            car.BrandId = brandId;
            car.ModelId = modelId;
            car.Year = year;
            car.ColorId = colorId;
            car.IsDeleted = isDeleted;
            return car;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BrandId
        {
            get
            {
                return _BrandId;
            }
            set
            {
                OnBrandIdChanging(value);
                ReportPropertyChanging("BrandId");
                _BrandId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BrandId");
                OnBrandIdChanged();
            }
        }
        private global::System.Int32 _BrandId;
        partial void OnBrandIdChanging(global::System.Int32 value);
        partial void OnBrandIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ModelId
        {
            get
            {
                return _ModelId;
            }
            set
            {
                OnModelIdChanging(value);
                ReportPropertyChanging("ModelId");
                _ModelId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModelId");
                OnModelIdChanged();
            }
        }
        private global::System.Int32 _ModelId;
        partial void OnModelIdChanging(global::System.Int32 value);
        partial void OnModelIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ColorId
        {
            get
            {
                return _ColorId;
            }
            set
            {
                OnColorIdChanging(value);
                ReportPropertyChanging("ColorId");
                _ColorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ColorId");
                OnColorIdChanged();
            }
        }
        private global::System.Int32 _ColorId;
        partial void OnColorIdChanging(global::System.Int32 value);
        partial void OnColorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarBrands", "CarBrand")]
        public CarBrand CarBrand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_Cars_CarBrands", "CarBrand").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_Cars_CarBrands", "CarBrand").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarBrand> CarBrandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_Cars_CarBrands", "CarBrand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarBrand>("TransportSystemModel.FK_Cars_CarBrands", "CarBrand", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarColors", "CarColor")]
        public CarColor CarColor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarColor>("TransportSystemModel.FK_Cars_CarColors", "CarColor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarColor>("TransportSystemModel.FK_Cars_CarColors", "CarColor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarColor> CarColorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarColor>("TransportSystemModel.FK_Cars_CarColors", "CarColor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarColor>("TransportSystemModel.FK_Cars_CarColors", "CarColor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarModels", "CarModel")]
        public CarModel CarModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("TransportSystemModel.FK_Cars_CarModels", "CarModel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("TransportSystemModel.FK_Cars_CarModels", "CarModel").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarModel> CarModelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("TransportSystemModel.FK_Cars_CarModels", "CarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarModel>("TransportSystemModel.FK_Cars_CarModels", "CarModel", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_Cars", "Trip")]
        public EntityCollection<Trip> Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trip>("TransportSystemModel.FK_Trips_Cars", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trip>("TransportSystemModel.FK_Trips_Cars", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="CarBrand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CarBrand : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CarBrand.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static CarBrand CreateCarBrand(global::System.Int32 id, global::System.String name)
        {
            CarBrand carBrand = new CarBrand();
            carBrand.Id = id;
            carBrand.Name = name;
            return carBrand;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarBrands", "Car")]
        public EntityCollection<Car> Car
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarBrands", "Car");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarBrands", "Car", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_CarModels_CarBrands", "CarModel")]
        public EntityCollection<CarModel> CarModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarModel>("TransportSystemModel.FK_CarModels_CarBrands", "CarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarModel>("TransportSystemModel.FK_CarModels_CarBrands", "CarModel", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="CarColor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CarColor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CarColor.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        public static CarColor CreateCarColor(global::System.Int32 id, global::System.String name, global::System.String code)
        {
            CarColor carColor = new CarColor();
            carColor.Id = id;
            carColor.Name = name;
            carColor.Code = code;
            return carColor;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarColors", "Car")]
        public EntityCollection<Car> Car
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarColors", "Car");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarColors", "Car", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="CarModel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CarModel : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CarModel.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="brandId">Исходное значение свойства BrandId.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static CarModel CreateCarModel(global::System.Int32 id, global::System.Int32 brandId, global::System.String name)
        {
            CarModel carModel = new CarModel();
            carModel.Id = id;
            carModel.BrandId = brandId;
            carModel.Name = name;
            return carModel;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BrandId
        {
            get
            {
                return _BrandId;
            }
            set
            {
                OnBrandIdChanging(value);
                ReportPropertyChanging("BrandId");
                _BrandId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BrandId");
                OnBrandIdChanged();
            }
        }
        private global::System.Int32 _BrandId;
        partial void OnBrandIdChanging(global::System.Int32 value);
        partial void OnBrandIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Cars_CarModels", "Car")]
        public EntityCollection<Car> Car
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarModels", "Car");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Car>("TransportSystemModel.FK_Cars_CarModels", "Car", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_CarModels_CarBrands", "CarBrand")]
        public CarBrand CarBrand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_CarModels_CarBrands", "CarBrand").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_CarModels_CarBrands", "CarBrand").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarBrand> CarBrandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarBrand>("TransportSystemModel.FK_CarModels_CarBrands", "CarBrand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarBrand>("TransportSystemModel.FK_CarModels_CarBrands", "CarBrand", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="Request")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Request : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Request.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="driverTripId">Исходное значение свойства DriverTripId.</param>
        /// <param name="passengerTripId">Исходное значение свойства PassengerTripId.</param>
        /// <param name="initiatorId">Исходное значение свойства InitiatorId.</param>
        /// <param name="statusRequestId">Исходное значение свойства StatusRequestId.</param>
        /// <param name="createDate">Исходное значение свойства CreateDate.</param>
        public static Request CreateRequest(global::System.Int32 id, global::System.Int32 driverTripId, global::System.Int32 passengerTripId, global::System.Int32 initiatorId, global::System.Int32 statusRequestId, global::System.DateTime createDate)
        {
            Request request = new Request();
            request.Id = id;
            request.DriverTripId = driverTripId;
            request.PassengerTripId = passengerTripId;
            request.InitiatorId = initiatorId;
            request.StatusRequestId = statusRequestId;
            request.CreateDate = createDate;
            return request;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DriverTripId
        {
            get
            {
                return _DriverTripId;
            }
            set
            {
                OnDriverTripIdChanging(value);
                ReportPropertyChanging("DriverTripId");
                _DriverTripId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DriverTripId");
                OnDriverTripIdChanged();
            }
        }
        private global::System.Int32 _DriverTripId;
        partial void OnDriverTripIdChanging(global::System.Int32 value);
        partial void OnDriverTripIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PassengerTripId
        {
            get
            {
                return _PassengerTripId;
            }
            set
            {
                OnPassengerTripIdChanging(value);
                ReportPropertyChanging("PassengerTripId");
                _PassengerTripId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PassengerTripId");
                OnPassengerTripIdChanged();
            }
        }
        private global::System.Int32 _PassengerTripId;
        partial void OnPassengerTripIdChanging(global::System.Int32 value);
        partial void OnPassengerTripIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InitiatorId
        {
            get
            {
                return _InitiatorId;
            }
            set
            {
                OnInitiatorIdChanging(value);
                ReportPropertyChanging("InitiatorId");
                _InitiatorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InitiatorId");
                OnInitiatorIdChanged();
            }
        }
        private global::System.Int32 _InitiatorId;
        partial void OnInitiatorIdChanging(global::System.Int32 value);
        partial void OnInitiatorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusRequestId
        {
            get
            {
                return _StatusRequestId;
            }
            set
            {
                OnStatusRequestIdChanging(value);
                ReportPropertyChanging("StatusRequestId");
                _StatusRequestId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusRequestId");
                OnStatusRequestIdChanged();
            }
        }
        private global::System.Int32 _StatusRequestId;
        partial void OnStatusRequestIdChanging(global::System.Int32 value);
        partial void OnStatusRequestIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateDate
        {
            get
            {
                return _CreateDate;
            }
            set
            {
                OnCreateDateChanging(value);
                ReportPropertyChanging("CreateDate");
                _CreateDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreateDate");
                OnCreateDateChanged();
            }
        }
        private global::System.DateTime _CreateDate;
        partial void OnCreateDateChanging(global::System.DateTime value);
        partial void OnCreateDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModificationDate
        {
            get
            {
                return _ModificationDate;
            }
            set
            {
                OnModificationDateChanging(value);
                ReportPropertyChanging("ModificationDate");
                _ModificationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModificationDate");
                OnModificationDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModificationDate;
        partial void OnModificationDateChanging(Nullable<global::System.DateTime> value);
        partial void OnModificationDateChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Request_Trip", "Trip")]
        public Trip Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip", "Trip").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip", "Trip").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Trip> TripReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip", "Trip", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Request_Trip1", "Trip")]
        public Trip Trip1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip1", "Trip").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip1", "Trip").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Trip> Trip1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip1", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Trip>("TransportSystemModel.FK_Request_Trip1", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="Trip")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Trip : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Trip.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="tripType">Исходное значение свойства TripType.</param>
        /// <param name="ownerId">Исходное значение свойства OwnerId.</param>
        /// <param name="tripStatus">Исходное значение свойства TripStatus.</param>
        /// <param name="isDeleted">Исходное значение свойства IsDeleted.</param>
        /// <param name="mainRouteStr">Исходное значение свойства MainRouteStr.</param>
        /// <param name="mainRouteShortStr">Исходное значение свойства MainRouteShortStr.</param>
        public static Trip CreateTrip(global::System.Int32 id, global::System.Int32 tripType, global::System.Int32 ownerId, global::System.Int32 tripStatus, global::System.Boolean isDeleted, global::System.String mainRouteStr, global::System.String mainRouteShortStr)
        {
            Trip trip = new Trip();
            trip.Id = id;
            trip.TripType = tripType;
            trip.OwnerId = ownerId;
            trip.TripStatus = tripStatus;
            trip.IsDeleted = isDeleted;
            trip.MainRouteStr = mainRouteStr;
            trip.MainRouteShortStr = mainRouteShortStr;
            return trip;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripType
        {
            get
            {
                return _TripType;
            }
            set
            {
                OnTripTypeChanging(value);
                ReportPropertyChanging("TripType");
                _TripType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripType");
                OnTripTypeChanged();
            }
        }
        private global::System.Int32 _TripType;
        partial void OnTripTypeChanging(global::System.Int32 value);
        partial void OnTripTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerId
        {
            get
            {
                return _OwnerId;
            }
            set
            {
                OnOwnerIdChanging(value);
                ReportPropertyChanging("OwnerId");
                _OwnerId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OwnerId");
                OnOwnerIdChanged();
            }
        }
        private global::System.Int32 _OwnerId;
        partial void OnOwnerIdChanging(global::System.Int32 value);
        partial void OnOwnerIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripStatus
        {
            get
            {
                return _TripStatus;
            }
            set
            {
                OnTripStatusChanging(value);
                ReportPropertyChanging("TripStatus");
                _TripStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripStatus");
                OnTripStatusChanged();
            }
        }
        private global::System.Int32 _TripStatus;
        partial void OnTripStatusChanging(global::System.Int32 value);
        partial void OnTripStatusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ExpectedEndDate
        {
            get
            {
                return _ExpectedEndDate;
            }
            set
            {
                OnExpectedEndDateChanging(value);
                ReportPropertyChanging("ExpectedEndDate");
                _ExpectedEndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExpectedEndDate");
                OnExpectedEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ExpectedEndDate;
        partial void OnExpectedEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnExpectedEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CarId
        {
            get
            {
                return _CarId;
            }
            set
            {
                OnCarIdChanging(value);
                ReportPropertyChanging("CarId");
                _CarId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarId");
                OnCarIdChanged();
            }
        }
        private Nullable<global::System.Int32> _CarId;
        partial void OnCarIdChanging(Nullable<global::System.Int32> value);
        partial void OnCarIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Seats
        {
            get
            {
                return _Seats;
            }
            set
            {
                OnSeatsChanging(value);
                ReportPropertyChanging("Seats");
                _Seats = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Seats");
                OnSeatsChanged();
            }
        }
        private Nullable<global::System.Int32> _Seats;
        partial void OnSeatsChanging(Nullable<global::System.Int32> value);
        partial void OnSeatsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FreeSeats
        {
            get
            {
                return _FreeSeats;
            }
            set
            {
                OnFreeSeatsChanging(value);
                ReportPropertyChanging("FreeSeats");
                _FreeSeats = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FreeSeats");
                OnFreeSeatsChanged();
            }
        }
        private Nullable<global::System.Int32> _FreeSeats;
        partial void OnFreeSeatsChanging(Nullable<global::System.Int32> value);
        partial void OnFreeSeatsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteStr
        {
            get
            {
                return _MainRouteStr;
            }
            set
            {
                OnMainRouteStrChanging(value);
                ReportPropertyChanging("MainRouteStr");
                _MainRouteStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteStr");
                OnMainRouteStrChanged();
            }
        }
        private global::System.String _MainRouteStr;
        partial void OnMainRouteStrChanging(global::System.String value);
        partial void OnMainRouteStrChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteShortStr
        {
            get
            {
                return _MainRouteShortStr;
            }
            set
            {
                OnMainRouteShortStrChanging(value);
                ReportPropertyChanging("MainRouteShortStr");
                _MainRouteShortStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteShortStr");
                OnMainRouteShortStrChanged();
            }
        }
        private global::System.String _MainRouteShortStr;
        partial void OnMainRouteShortStrChanging(global::System.String value);
        partial void OnMainRouteShortStrChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Request_Trip", "Request")]
        public EntityCollection<Request> Request
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Request>("TransportSystemModel.FK_Request_Trip", "Request");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Request>("TransportSystemModel.FK_Request_Trip", "Request", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_Cars", "Car")]
        public Car Car
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Car>("TransportSystemModel.FK_Trips_Cars", "Car").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Car>("TransportSystemModel.FK_Trips_Cars", "Car").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Car> CarReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Car>("TransportSystemModel.FK_Trips_Cars", "Car");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Car>("TransportSystemModel.FK_Trips_Cars", "Car", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Request_Trip1", "Request")]
        public EntityCollection<Request> Request1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Request>("TransportSystemModel.FK_Request_Trip1", "Request");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Request>("TransportSystemModel.FK_Request_Trip1", "Request", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_TripStatus", "TripStatus")]
        public TripStatus TripStatus1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripStatus>("TransportSystemModel.FK_Trips_TripStatus", "TripStatus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripStatus>("TransportSystemModel.FK_Trips_TripStatus", "TripStatus").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TripStatus> TripStatus1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripStatus>("TransportSystemModel.FK_Trips_TripStatus", "TripStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TripStatus>("TransportSystemModel.FK_Trips_TripStatus", "TripStatus", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_TripType", "TripType")]
        public TripType TripType1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripType>("TransportSystemModel.FK_Trips_TripType", "TripType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripType>("TransportSystemModel.FK_Trips_TripType", "TripType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TripType> TripType1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TripType>("TransportSystemModel.FK_Trips_TripType", "TripType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TripType>("TransportSystemModel.FK_Trips_TripType", "TripType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_TripDate_Trip", "TripDate")]
        public EntityCollection<TripDate> TripDate
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TripDate>("TransportSystemModel.FK_TripDate_Trip", "TripDate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TripDate>("TransportSystemModel.FK_TripDate_Trip", "TripDate", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trip_User", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TransportSystemModel.FK_Trip_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TransportSystemModel.FK_Trip_User", "User").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("TransportSystemModel.FK_Trip_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("TransportSystemModel.FK_Trip_User", "User", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_TripRoute_Trip", "TripRoute")]
        public EntityCollection<TripRoute> TripRoute
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TripRoute>("TransportSystemModel.FK_TripRoute_Trip", "TripRoute");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TripRoute>("TransportSystemModel.FK_TripRoute_Trip", "TripRoute", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="TripDate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TripDate : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TripDate.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        /// <param name="isDeleted">Исходное значение свойства IsDeleted.</param>
        /// <param name="tripId">Исходное значение свойства TripId.</param>
        public static TripDate CreateTripDate(global::System.Int64 id, global::System.DateTime date, global::System.Boolean isDeleted, global::System.Int32 tripId)
        {
            TripDate tripDate = new TripDate();
            tripDate.Id = id;
            tripDate.Date = date;
            tripDate.IsDeleted = isDeleted;
            tripDate.TripId = tripId;
            return tripDate;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripId
        {
            get
            {
                return _TripId;
            }
            set
            {
                OnTripIdChanging(value);
                ReportPropertyChanging("TripId");
                _TripId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripId");
                OnTripIdChanged();
            }
        }
        private global::System.Int32 _TripId;
        partial void OnTripIdChanging(global::System.Int32 value);
        partial void OnTripIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_TripDate_Trip", "Trip")]
        public Trip Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripDate_Trip", "Trip").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripDate_Trip", "Trip").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Trip> TripReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripDate_Trip", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Trip>("TransportSystemModel.FK_TripDate_Trip", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="TripRoute")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TripRoute : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TripRoute.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="tripId">Исходное значение свойства TripId.</param>
        /// <param name="startPointGid">Исходное значение свойства StartPointGid.</param>
        /// <param name="startPointFullName">Исходное значение свойства StartPointFullName.</param>
        /// <param name="startPointShortName">Исходное значение свойства StartPointShortName.</param>
        /// <param name="endPointGid">Исходное значение свойства EndPointGid.</param>
        /// <param name="endPointFullName">Исходное значение свойства EndPointFullName.</param>
        /// <param name="endPointShortName">Исходное значение свойства EndPointShortName.</param>
        public static TripRoute CreateTripRoute(global::System.Int32 id, global::System.Int32 tripId, global::System.String startPointGid, global::System.String startPointFullName, global::System.String startPointShortName, global::System.String endPointGid, global::System.String endPointFullName, global::System.String endPointShortName)
        {
            TripRoute tripRoute = new TripRoute();
            tripRoute.Id = id;
            tripRoute.TripId = tripId;
            tripRoute.StartPointGid = startPointGid;
            tripRoute.StartPointFullName = startPointFullName;
            tripRoute.StartPointShortName = startPointShortName;
            tripRoute.EndPointGid = endPointGid;
            tripRoute.EndPointFullName = endPointFullName;
            tripRoute.EndPointShortName = endPointShortName;
            return tripRoute;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripId
        {
            get
            {
                return _TripId;
            }
            set
            {
                OnTripIdChanging(value);
                ReportPropertyChanging("TripId");
                _TripId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripId");
                OnTripIdChanged();
            }
        }
        private global::System.Int32 _TripId;
        partial void OnTripIdChanging(global::System.Int32 value);
        partial void OnTripIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointGid
        {
            get
            {
                return _StartPointGid;
            }
            set
            {
                OnStartPointGidChanging(value);
                ReportPropertyChanging("StartPointGid");
                _StartPointGid = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointGid");
                OnStartPointGidChanged();
            }
        }
        private global::System.String _StartPointGid;
        partial void OnStartPointGidChanging(global::System.String value);
        partial void OnStartPointGidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointFullName
        {
            get
            {
                return _StartPointFullName;
            }
            set
            {
                OnStartPointFullNameChanging(value);
                ReportPropertyChanging("StartPointFullName");
                _StartPointFullName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointFullName");
                OnStartPointFullNameChanged();
            }
        }
        private global::System.String _StartPointFullName;
        partial void OnStartPointFullNameChanging(global::System.String value);
        partial void OnStartPointFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointShortName
        {
            get
            {
                return _StartPointShortName;
            }
            set
            {
                OnStartPointShortNameChanging(value);
                ReportPropertyChanging("StartPointShortName");
                _StartPointShortName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointShortName");
                OnStartPointShortNameChanged();
            }
        }
        private global::System.String _StartPointShortName;
        partial void OnStartPointShortNameChanging(global::System.String value);
        partial void OnStartPointShortNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointGid
        {
            get
            {
                return _EndPointGid;
            }
            set
            {
                OnEndPointGidChanging(value);
                ReportPropertyChanging("EndPointGid");
                _EndPointGid = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointGid");
                OnEndPointGidChanged();
            }
        }
        private global::System.String _EndPointGid;
        partial void OnEndPointGidChanging(global::System.String value);
        partial void OnEndPointGidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointFullName
        {
            get
            {
                return _EndPointFullName;
            }
            set
            {
                OnEndPointFullNameChanging(value);
                ReportPropertyChanging("EndPointFullName");
                _EndPointFullName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointFullName");
                OnEndPointFullNameChanged();
            }
        }
        private global::System.String _EndPointFullName;
        partial void OnEndPointFullNameChanging(global::System.String value);
        partial void OnEndPointFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointShortName
        {
            get
            {
                return _EndPointShortName;
            }
            set
            {
                OnEndPointShortNameChanging(value);
                ReportPropertyChanging("EndPointShortName");
                _EndPointShortName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointShortName");
                OnEndPointShortNameChanged();
            }
        }
        private global::System.String _EndPointShortName;
        partial void OnEndPointShortNameChanging(global::System.String value);
        partial void OnEndPointShortNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_TripRoute_Trip", "Trip")]
        public Trip Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripRoute_Trip", "Trip").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripRoute_Trip", "Trip").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Trip> TripReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Trip>("TransportSystemModel.FK_TripRoute_Trip", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Trip>("TransportSystemModel.FK_TripRoute_Trip", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="TripStatus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TripStatus : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TripStatus.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="statusName">Исходное значение свойства StatusName.</param>
        public static TripStatus CreateTripStatus(global::System.Int32 id, global::System.String statusName)
        {
            TripStatus tripStatus = new TripStatus();
            tripStatus.Id = id;
            tripStatus.StatusName = statusName;
            return tripStatus;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StatusName
        {
            get
            {
                return _StatusName;
            }
            set
            {
                OnStatusNameChanging(value);
                ReportPropertyChanging("StatusName");
                _StatusName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StatusName");
                OnStatusNameChanged();
            }
        }
        private global::System.String _StatusName;
        partial void OnStatusNameChanging(global::System.String value);
        partial void OnStatusNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_TripStatus", "Trip")]
        public EntityCollection<Trip> Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trip>("TransportSystemModel.FK_Trips_TripStatus", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trip>("TransportSystemModel.FK_Trips_TripStatus", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="TripType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TripType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TripType.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="typeName">Исходное значение свойства TypeName.</param>
        public static TripType CreateTripType(global::System.Int32 id, global::System.String typeName)
        {
            TripType tripType = new TripType();
            tripType.Id = id;
            tripType.TypeName = typeName;
            return tripType;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TypeName
        {
            get
            {
                return _TypeName;
            }
            set
            {
                OnTypeNameChanging(value);
                ReportPropertyChanging("TypeName");
                _TypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TypeName");
                OnTypeNameChanged();
            }
        }
        private global::System.String _TypeName;
        partial void OnTypeNameChanging(global::System.String value);
        partial void OnTypeNameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trips_TripType", "Trip")]
        public EntityCollection<Trip> Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trip>("TransportSystemModel.FK_Trips_TripType", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trip>("TransportSystemModel.FK_Trips_TripType", "Trip", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TransportSystemModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта User.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        /// <param name="isConfirmed">Исходное значение свойства IsConfirmed.</param>
        /// <param name="registerDate">Исходное значение свойства RegisterDate.</param>
        /// <param name="lastVisitDate">Исходное значение свойства LastVisitDate.</param>
        public static User CreateUser(global::System.Int32 id, global::System.String password, global::System.Boolean isConfirmed, global::System.DateTime registerDate, global::System.DateTime lastVisitDate)
        {
            User user = new User();
            user.Id = id;
            user.Password = password;
            user.IsConfirmed = isConfirmed;
            user.RegisterDate = registerDate;
            user.LastVisitDate = lastVisitDate;
            return user;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> Age
        {
            get
            {
                return _Age;
            }
            set
            {
                OnAgeChanging(value);
                ReportPropertyChanging("Age");
                _Age = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Age");
                OnAgeChanged();
            }
        }
        private Nullable<global::System.Byte> _Age;
        partial void OnAgeChanging(Nullable<global::System.Byte> value);
        partial void OnAgeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
                OnSexChanging(value);
                ReportPropertyChanging("Sex");
                _Sex = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Sex");
                OnSexChanged();
            }
        }
        private global::System.String _Sex;
        partial void OnSexChanging(global::System.String value);
        partial void OnSexChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Rate
        {
            get
            {
                return _Rate;
            }
            set
            {
                OnRateChanging(value);
                ReportPropertyChanging("Rate");
                _Rate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rate");
                OnRateChanged();
            }
        }
        private Nullable<global::System.Int32> _Rate;
        partial void OnRateChanging(Nullable<global::System.Int32> value);
        partial void OnRateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PlusesNumber
        {
            get
            {
                return _PlusesNumber;
            }
            set
            {
                OnPlusesNumberChanging(value);
                ReportPropertyChanging("PlusesNumber");
                _PlusesNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PlusesNumber");
                OnPlusesNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _PlusesNumber;
        partial void OnPlusesNumberChanging(Nullable<global::System.Int32> value);
        partial void OnPlusesNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MinusesNumber
        {
            get
            {
                return _MinusesNumber;
            }
            set
            {
                OnMinusesNumberChanging(value);
                ReportPropertyChanging("MinusesNumber");
                _MinusesNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinusesNumber");
                OnMinusesNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _MinusesNumber;
        partial void OnMinusesNumberChanging(Nullable<global::System.Int32> value);
        partial void OnMinusesNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SuccessTripsNumber
        {
            get
            {
                return _SuccessTripsNumber;
            }
            set
            {
                OnSuccessTripsNumberChanging(value);
                ReportPropertyChanging("SuccessTripsNumber");
                _SuccessTripsNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SuccessTripsNumber");
                OnSuccessTripsNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _SuccessTripsNumber;
        partial void OnSuccessTripsNumberChanging(Nullable<global::System.Int32> value);
        partial void OnSuccessTripsNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FailedTripsNumber
        {
            get
            {
                return _FailedTripsNumber;
            }
            set
            {
                OnFailedTripsNumberChanging(value);
                ReportPropertyChanging("FailedTripsNumber");
                _FailedTripsNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FailedTripsNumber");
                OnFailedTripsNumberChanged();
            }
        }
        private Nullable<global::System.Int32> _FailedTripsNumber;
        partial void OnFailedTripsNumberChanging(Nullable<global::System.Int32> value);
        partial void OnFailedTripsNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsConfirmed
        {
            get
            {
                return _IsConfirmed;
            }
            set
            {
                OnIsConfirmedChanging(value);
                ReportPropertyChanging("IsConfirmed");
                _IsConfirmed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsConfirmed");
                OnIsConfirmedChanged();
            }
        }
        private global::System.Boolean _IsConfirmed;
        partial void OnIsConfirmedChanging(global::System.Boolean value);
        partial void OnIsConfirmedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime RegisterDate
        {
            get
            {
                return _RegisterDate;
            }
            set
            {
                OnRegisterDateChanging(value);
                ReportPropertyChanging("RegisterDate");
                _RegisterDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RegisterDate");
                OnRegisterDateChanged();
            }
        }
        private global::System.DateTime _RegisterDate;
        partial void OnRegisterDateChanging(global::System.DateTime value);
        partial void OnRegisterDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastVisitDate
        {
            get
            {
                return _LastVisitDate;
            }
            set
            {
                OnLastVisitDateChanging(value);
                ReportPropertyChanging("LastVisitDate");
                _LastVisitDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastVisitDate");
                OnLastVisitDateChanged();
            }
        }
        private global::System.DateTime _LastVisitDate;
        partial void OnLastVisitDateChanging(global::System.DateTime value);
        partial void OnLastVisitDateChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TransportSystemModel", "FK_Trip_User", "Trip")]
        public EntityCollection<Trip> Trip
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Trip>("TransportSystemModel.FK_Trip_User", "Trip");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Trip>("TransportSystemModel.FK_Trip_User", "Trip", value);
                }
            }
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="TransportSystemModel", Name="GetActiveTripsByUser_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetActiveTripsByUser_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetActiveTripsByUser_Result.
        /// </summary>
        /// <param name="tripId">Исходное значение свойства TripId.</param>
        /// <param name="tripType">Исходное значение свойства TripType.</param>
        /// <param name="ownerId">Исходное значение свойства OwnerId.</param>
        /// <param name="tripStatus">Исходное значение свойства TripStatus.</param>
        /// <param name="mainRouteStr">Исходное значение свойства MainRouteStr.</param>
        /// <param name="mainRouteShortStr">Исходное значение свойства MainRouteShortStr.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        public static GetActiveTripsByUser_Result CreateGetActiveTripsByUser_Result(global::System.Int32 tripId, global::System.Int32 tripType, global::System.Int32 ownerId, global::System.Int32 tripStatus, global::System.String mainRouteStr, global::System.String mainRouteShortStr, global::System.DateTime date)
        {
            GetActiveTripsByUser_Result getActiveTripsByUser_Result = new GetActiveTripsByUser_Result();
            getActiveTripsByUser_Result.TripId = tripId;
            getActiveTripsByUser_Result.TripType = tripType;
            getActiveTripsByUser_Result.OwnerId = ownerId;
            getActiveTripsByUser_Result.TripStatus = tripStatus;
            getActiveTripsByUser_Result.MainRouteStr = mainRouteStr;
            getActiveTripsByUser_Result.MainRouteShortStr = mainRouteShortStr;
            getActiveTripsByUser_Result.Date = date;
            return getActiveTripsByUser_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripId
        {
            get
            {
                return _TripId;
            }
            set
            {
                OnTripIdChanging(value);
                ReportPropertyChanging("TripId");
                _TripId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripId");
                OnTripIdChanged();
            }
        }
        private global::System.Int32 _TripId;
        partial void OnTripIdChanging(global::System.Int32 value);
        partial void OnTripIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripType
        {
            get
            {
                return _TripType;
            }
            set
            {
                OnTripTypeChanging(value);
                ReportPropertyChanging("TripType");
                _TripType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripType");
                OnTripTypeChanged();
            }
        }
        private global::System.Int32 _TripType;
        partial void OnTripTypeChanging(global::System.Int32 value);
        partial void OnTripTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerId
        {
            get
            {
                return _OwnerId;
            }
            set
            {
                OnOwnerIdChanging(value);
                ReportPropertyChanging("OwnerId");
                _OwnerId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OwnerId");
                OnOwnerIdChanged();
            }
        }
        private global::System.Int32 _OwnerId;
        partial void OnOwnerIdChanging(global::System.Int32 value);
        partial void OnOwnerIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripStatus
        {
            get
            {
                return _TripStatus;
            }
            set
            {
                OnTripStatusChanging(value);
                ReportPropertyChanging("TripStatus");
                _TripStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripStatus");
                OnTripStatusChanged();
            }
        }
        private global::System.Int32 _TripStatus;
        partial void OnTripStatusChanging(global::System.Int32 value);
        partial void OnTripStatusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ExpectedEndDate
        {
            get
            {
                return _ExpectedEndDate;
            }
            set
            {
                OnExpectedEndDateChanging(value);
                ReportPropertyChanging("ExpectedEndDate");
                _ExpectedEndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExpectedEndDate");
                OnExpectedEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ExpectedEndDate;
        partial void OnExpectedEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnExpectedEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CarId
        {
            get
            {
                return _CarId;
            }
            set
            {
                OnCarIdChanging(value);
                ReportPropertyChanging("CarId");
                _CarId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarId");
                OnCarIdChanged();
            }
        }
        private Nullable<global::System.Int32> _CarId;
        partial void OnCarIdChanging(Nullable<global::System.Int32> value);
        partial void OnCarIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Seats
        {
            get
            {
                return _Seats;
            }
            set
            {
                OnSeatsChanging(value);
                ReportPropertyChanging("Seats");
                _Seats = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Seats");
                OnSeatsChanged();
            }
        }
        private Nullable<global::System.Int32> _Seats;
        partial void OnSeatsChanging(Nullable<global::System.Int32> value);
        partial void OnSeatsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteStr
        {
            get
            {
                return _MainRouteStr;
            }
            set
            {
                OnMainRouteStrChanging(value);
                ReportPropertyChanging("MainRouteStr");
                _MainRouteStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteStr");
                OnMainRouteStrChanged();
            }
        }
        private global::System.String _MainRouteStr;
        partial void OnMainRouteStrChanging(global::System.String value);
        partial void OnMainRouteStrChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteShortStr
        {
            get
            {
                return _MainRouteShortStr;
            }
            set
            {
                OnMainRouteShortStrChanging(value);
                ReportPropertyChanging("MainRouteShortStr");
                _MainRouteShortStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteShortStr");
                OnMainRouteShortStrChanged();
            }
        }
        private global::System.String _MainRouteShortStr;
        partial void OnMainRouteShortStrChanging(global::System.String value);
        partial void OnMainRouteShortStrChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="TransportSystemModel", Name="GetTrips_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetTrips_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetTrips_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="tripType">Исходное значение свойства TripType.</param>
        /// <param name="ownerId">Исходное значение свойства OwnerId.</param>
        /// <param name="tripStatus">Исходное значение свойства TripStatus.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        /// <param name="routeId">Исходное значение свойства RouteId.</param>
        /// <param name="startPointGid">Исходное значение свойства StartPointGid.</param>
        /// <param name="startPointFullName">Исходное значение свойства StartPointFullName.</param>
        /// <param name="startPointShortName">Исходное значение свойства StartPointShortName.</param>
        /// <param name="endPointGid">Исходное значение свойства EndPointGid.</param>
        /// <param name="endPointFullName">Исходное значение свойства EndPointFullName.</param>
        /// <param name="endPointShortName">Исходное значение свойства EndPointShortName.</param>
        /// <param name="seats">Исходное значение свойства Seats.</param>
        /// <param name="tripDateId">Исходное значение свойства TripDateId.</param>
        /// <param name="mainRouteStr">Исходное значение свойства MainRouteStr.</param>
        /// <param name="mainRouteShortStr">Исходное значение свойства MainRouteShortStr.</param>
        public static GetTrips_Result CreateGetTrips_Result(global::System.Int32 id, global::System.Int32 tripType, global::System.Int32 ownerId, global::System.Int32 tripStatus, global::System.DateTime date, global::System.Int64 routeId, global::System.String startPointGid, global::System.String startPointFullName, global::System.String startPointShortName, global::System.String endPointGid, global::System.String endPointFullName, global::System.String endPointShortName, global::System.Int32 seats, global::System.Int64 tripDateId, global::System.String mainRouteStr, global::System.String mainRouteShortStr)
        {
            GetTrips_Result getTrips_Result = new GetTrips_Result();
            getTrips_Result.Id = id;
            getTrips_Result.TripType = tripType;
            getTrips_Result.OwnerId = ownerId;
            getTrips_Result.TripStatus = tripStatus;
            getTrips_Result.Date = date;
            getTrips_Result.RouteId = routeId;
            getTrips_Result.StartPointGid = startPointGid;
            getTrips_Result.StartPointFullName = startPointFullName;
            getTrips_Result.StartPointShortName = startPointShortName;
            getTrips_Result.EndPointGid = endPointGid;
            getTrips_Result.EndPointFullName = endPointFullName;
            getTrips_Result.EndPointShortName = endPointShortName;
            getTrips_Result.Seats = seats;
            getTrips_Result.TripDateId = tripDateId;
            getTrips_Result.MainRouteStr = mainRouteStr;
            getTrips_Result.MainRouteShortStr = mainRouteShortStr;
            return getTrips_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                OnIdChanging(value);
                ReportPropertyChanging("Id");
                _Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Id");
                OnIdChanged();
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripType
        {
            get
            {
                return _TripType;
            }
            set
            {
                OnTripTypeChanging(value);
                ReportPropertyChanging("TripType");
                _TripType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripType");
                OnTripTypeChanged();
            }
        }
        private global::System.Int32 _TripType;
        partial void OnTripTypeChanging(global::System.Int32 value);
        partial void OnTripTypeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerId
        {
            get
            {
                return _OwnerId;
            }
            set
            {
                OnOwnerIdChanging(value);
                ReportPropertyChanging("OwnerId");
                _OwnerId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OwnerId");
                OnOwnerIdChanged();
            }
        }
        private global::System.Int32 _OwnerId;
        partial void OnOwnerIdChanging(global::System.Int32 value);
        partial void OnOwnerIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TripStatus
        {
            get
            {
                return _TripStatus;
            }
            set
            {
                OnTripStatusChanging(value);
                ReportPropertyChanging("TripStatus");
                _TripStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripStatus");
                OnTripStatusChanged();
            }
        }
        private global::System.Int32 _TripStatus;
        partial void OnTripStatusChanging(global::System.Int32 value);
        partial void OnTripStatusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ExpectedEndDate
        {
            get
            {
                return _ExpectedEndDate;
            }
            set
            {
                OnExpectedEndDateChanging(value);
                ReportPropertyChanging("ExpectedEndDate");
                _ExpectedEndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExpectedEndDate");
                OnExpectedEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ExpectedEndDate;
        partial void OnExpectedEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnExpectedEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CarId
        {
            get
            {
                return _CarId;
            }
            set
            {
                OnCarIdChanging(value);
                ReportPropertyChanging("CarId");
                _CarId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarId");
                OnCarIdChanged();
            }
        }
        private Nullable<global::System.Int32> _CarId;
        partial void OnCarIdChanging(Nullable<global::System.Int32> value);
        partial void OnCarIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RouteId
        {
            get
            {
                return _RouteId;
            }
            set
            {
                OnRouteIdChanging(value);
                ReportPropertyChanging("RouteId");
                _RouteId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RouteId");
                OnRouteIdChanged();
            }
        }
        private global::System.Int64 _RouteId;
        partial void OnRouteIdChanging(global::System.Int64 value);
        partial void OnRouteIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointGid
        {
            get
            {
                return _StartPointGid;
            }
            set
            {
                OnStartPointGidChanging(value);
                ReportPropertyChanging("StartPointGid");
                _StartPointGid = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointGid");
                OnStartPointGidChanged();
            }
        }
        private global::System.String _StartPointGid;
        partial void OnStartPointGidChanging(global::System.String value);
        partial void OnStartPointGidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointFullName
        {
            get
            {
                return _StartPointFullName;
            }
            set
            {
                OnStartPointFullNameChanging(value);
                ReportPropertyChanging("StartPointFullName");
                _StartPointFullName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointFullName");
                OnStartPointFullNameChanged();
            }
        }
        private global::System.String _StartPointFullName;
        partial void OnStartPointFullNameChanging(global::System.String value);
        partial void OnStartPointFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartPointShortName
        {
            get
            {
                return _StartPointShortName;
            }
            set
            {
                OnStartPointShortNameChanging(value);
                ReportPropertyChanging("StartPointShortName");
                _StartPointShortName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartPointShortName");
                OnStartPointShortNameChanged();
            }
        }
        private global::System.String _StartPointShortName;
        partial void OnStartPointShortNameChanging(global::System.String value);
        partial void OnStartPointShortNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointGid
        {
            get
            {
                return _EndPointGid;
            }
            set
            {
                OnEndPointGidChanging(value);
                ReportPropertyChanging("EndPointGid");
                _EndPointGid = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointGid");
                OnEndPointGidChanged();
            }
        }
        private global::System.String _EndPointGid;
        partial void OnEndPointGidChanging(global::System.String value);
        partial void OnEndPointGidChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointFullName
        {
            get
            {
                return _EndPointFullName;
            }
            set
            {
                OnEndPointFullNameChanging(value);
                ReportPropertyChanging("EndPointFullName");
                _EndPointFullName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointFullName");
                OnEndPointFullNameChanged();
            }
        }
        private global::System.String _EndPointFullName;
        partial void OnEndPointFullNameChanging(global::System.String value);
        partial void OnEndPointFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndPointShortName
        {
            get
            {
                return _EndPointShortName;
            }
            set
            {
                OnEndPointShortNameChanging(value);
                ReportPropertyChanging("EndPointShortName");
                _EndPointShortName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndPointShortName");
                OnEndPointShortNameChanged();
            }
        }
        private global::System.String _EndPointShortName;
        partial void OnEndPointShortNameChanging(global::System.String value);
        partial void OnEndPointShortNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Seats
        {
            get
            {
                return _Seats;
            }
            set
            {
                OnSeatsChanging(value);
                ReportPropertyChanging("Seats");
                _Seats = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Seats");
                OnSeatsChanged();
            }
        }
        private global::System.Int32 _Seats;
        partial void OnSeatsChanging(global::System.Int32 value);
        partial void OnSeatsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 TripDateId
        {
            get
            {
                return _TripDateId;
            }
            set
            {
                OnTripDateIdChanging(value);
                ReportPropertyChanging("TripDateId");
                _TripDateId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TripDateId");
                OnTripDateIdChanged();
            }
        }
        private global::System.Int64 _TripDateId;
        partial void OnTripDateIdChanging(global::System.Int64 value);
        partial void OnTripDateIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteStr
        {
            get
            {
                return _MainRouteStr;
            }
            set
            {
                OnMainRouteStrChanging(value);
                ReportPropertyChanging("MainRouteStr");
                _MainRouteStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteStr");
                OnMainRouteStrChanged();
            }
        }
        private global::System.String _MainRouteStr;
        partial void OnMainRouteStrChanging(global::System.String value);
        partial void OnMainRouteStrChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MainRouteShortStr
        {
            get
            {
                return _MainRouteShortStr;
            }
            set
            {
                OnMainRouteShortStrChanging(value);
                ReportPropertyChanging("MainRouteShortStr");
                _MainRouteShortStr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MainRouteShortStr");
                OnMainRouteShortStrChanged();
            }
        }
        private global::System.String _MainRouteShortStr;
        partial void OnMainRouteShortStrChanging(global::System.String value);
        partial void OnMainRouteShortStrChanged();

        #endregion

    }

    #endregion

    
}
